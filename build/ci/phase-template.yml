parameters:
  name: ''
  buildScript: ''
  buildMatrix: {}
  buildQueue: {}
  testDistro: ''

phases:

- phase: ${{ parameters.name }}
  variables:
    _buildScript: ${{ parameters.buildScript }}
    _dockerRun: docker run -e SYSTEM_TEAMFOUNDATIONCOLLECTIONURI="$(System.TeamFoundationCollectionUri)" -e BUILD_BUILDNUMBER="$(Build.BuildNumber)" -i -v $(Build.SourcesDirectory):/builddir -w="/builddir"
    _distro: ${{ parameters.testDistro }}
  queue:
   parallel: 99
   matrix:
     ${{ insert }}: ${{ parameters.buildMatrix }}
   ${{ insert }}: ${{ parameters.buildQueue }}
  steps:

  # Install python
  - ${{ if eq(parameters.installPython, '1') }}:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
    - script: pip install pytest>=4.4.0 pytest-cov>=2.6.1 numpy>=1.16.2 pandas>=0.24.2 scikit-learn>=0.20.3 matplotlib
      displayName: Install numpy, pandas, scikit-learn
    - script: python -c "import sys;print(sys.prefix, sys.base_prefix, sys.executable, sys.base_exec_prefix)"
      displayName: Display python versions
    - script: python -c "import numpy;print(numpy.__version__, numpy.__file__)"
      displayName: Display numpy versions

  - ${{ if eq(parameters.installPython, '0') }}:
    - script: "echo will download Python '$(installPython)'."
      displayName: Will Download python.

  # Windows phases
  - ${{ if eq(parameters.name, 'Windows') }}:
    - script: $(_buildScript) --configuration $(_configuration) --runTests
  # Mac phases
  - ${{ if eq(parameters.name, 'Mac') }}:
    - script: brew update && brew install libomp mono-libgdiplus gettext && brew link gettext --force
    - ${{ if eq(parameters.testDistro, 'noTests') }}:
      - script: chmod 777 $(_buildScript) && $(_buildScript) --configuration $(_configuration)
    - ${{ if eq(parameters.testDistro, '') }}:
      - script: chmod 777 $(_buildScript) && $(_buildScript) --configuration $(_configuration) --runTests
  # Linux phases
  - ${{ if or(eq(parameters.name, 'Linux_Ubuntu16'), eq(parameters.name, 'Linux_Ubuntu14'), eq(parameters.name, 'Linux_Ubuntu16_PyBind11'), eq(parameters.name, 'Linux_CentOS7')) }}:
    - script: sudo apt-get update && sudo apt-get install clang cmake libunwind8 curl liblttng-ust0 libcurl3 libssl1.0.0 libuuid1 libkrb5-3 zlib1g
    - ${{ if eq(parameters.testDistro, 'noTests') }}:
      - script: chmod 777 $(_buildScript) && $(_buildScript) --configuration $(_configuration)
    - ${{ if eq(parameters.testDistro, '') }}:
      - script: chmod 777 $(_buildScript) && $(_buildScript) --configuration $(_configuration) --runTests

  # Publish build artifacts
  - ${{ if or(eq(parameters.name, 'Linux_Ubuntu16'), eq(parameters.name, 'Linux_Ubuntu16_PyBind11'), eq(parameters.name, 'Windows'), eq(parameters.name, 'Mac')) }}:
    - task: PublishBuildArtifacts@1
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: Publish wheel file to VSTS artifacts
      inputs:
        pathToPublish: $(Build.SourcesDirectory)/target
        artifactName: NimbusML Wheels
        artifactType: container
